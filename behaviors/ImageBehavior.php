<?php
/**
 * Created by PhpStorm.
 * User: quangthinh
 * Date: 7/18/2016
 * Time: 4:47 PM
 */

namespace quangthinh\yii\common\behaviors;


use Ramsey\Uuid\Uuid;
use Yii;
use yii\base\Behavior;
use yii\base\InvalidConfigException;
use yii\base\Model;
use yii\db\BaseActiveRecord;
use yii\helpers\FileHelper;
use yii\helpers\Json;
use yii\web\UploadedFile;

/**
 * Class ImageBehavior
 * @package quangthinh\yii\common\behaviors
 *
 * Behavior Image, Data Update
 */
class ImageBehavior extends Behavior
{
    public $urlAttribute = '{attribute}_url';
    public $pathAttribute = '{attribute}_path';

    public $attribute = null;

    public $defaultUrl = 'http://placehold.it/150x150';

    public $baseUrl;
    public $basePath;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        if (!$this->attribute) {
            throw new InvalidConfigException('Invalid image attribute');
        }

        if (!$this->basePath) {
            throw new InvalidConfigException('Invalid Base Path');
        }

        if (!$this->baseUrl) {
            throw new InvalidConfigException('Invalid Base Url');
        }

        $this->urlAttribute = strtr($this->urlAttribute, ['{attribute}' => $this->attribute]);
        $this->pathAttribute = strtr($this->pathAttribute, ['{attribute}' => $this->attribute]);
    }

    public function events()
    {
        return [
            Model::EVENT_BEFORE_VALIDATE => 'beforeValidate',
            Model::EVENT_AFTER_VALIDATE => 'afterValidate',

            BaseActiveRecord::EVENT_BEFORE_INSERT => 'beforeChange',
            BaseActiveRecord::EVENT_AFTER_INSERT => 'afterChange',

            BaseActiveRecord::EVENT_BEFORE_UPDATE => 'beforeChange',
            BaseActiveRecord::EVENT_AFTER_UPDATE => 'afterChange',

            BaseActiveRecord::EVENT_AFTER_DELETE => 'afterDelete',
        ];
    }

    private $_oldAttribute;

    public function beforeValidate()
    {
        /**
         * @var $model BaseActiveRecord
         */
        $model = $this->owner;
        $this->_oldAttribute = $model->getAttribute($this->attribute);
        $model->setAttribute($this->attribute, UploadedFile::getInstance($model, $this->attribute));
    }

    public function afterDelete()
    {
        $path = $this->getImagePath();
        @unlink($path);
    }

    private $_uploadedFile;

    public function beforeChange()
    {
        // replace info
        /**
         * @var BaseActiveRecord $model
         * @var UploadedFile $uploadedFile
         */
        $model = $this->owner;
        $uploadedFile = $model->getAttribute($this->attribute);

        if ($uploadedFile instanceof UploadedFile) {
            $this->_uploadedFile = $uploadedFile;

            $filename = $uploadedFile->baseName . '.' . $uploadedFile->extension;
            $uuid = strtr(Uuid::uuid4(), ['-' => DIRECTORY_SEPARATOR]);

            $model->setAttribute($this->attribute, Json::encode([
                'path' => $uuid . '/' . $filename,
                'url' => $uuid . '/' . $filename,
            ]));
        }
    }

    public function afterChange()
    {
        /**
         * @var BaseActiveRecord $model
         */
        $model = $this->owner;

        if ($this->_uploadedFile instanceof UploadedFile) {
            $uploadedFile = $this->_uploadedFile;
            $file = $this->getImagePath();

            if ($this->saveFile($this->_uploadedFile, $file)) {
                return $this->removeOldAttribute();
            }
        }

        $model->setAttribute($this->attribute, $this->_oldAttribute);
        $model->save(false, [$this->attribute]);
    }

    public function afterValidate()
    {
        /**
         * @var $model BaseActiveRecord
         */
        $model = $this->owner;
        if ($model->hasErrors()) {
            $model->setAttribute($this->attribute, $this->_oldAttribute);
        }
    }

    protected function getImageInfo($isOld = false)
    {
        /**
         * @var BaseActiveRecord $model
         */
        $model = $this->owner;
        $data = $model->getAttribute($this->attribute);
        if (is_string($data)) {
            try {
                $json = Json::decode($data, true);
                return $json;
            } catch (\Exception $ex) {
                $model->addError($this->attribute, $ex->getMessage());
            }
        }

        return null;
    }

    public function getImageUrl($isOld = false)
    {
        $data = $this->getImageInfo($isOld);

        if ($data) {
            return $data['url'];
        }

        return $this->defaultUrl;
    }

    public function getImagePath($isOld = false)
    {
        $data = $this->getImageInfo($isOld);

        if ($data) {
            return $data['path'];
        }

        return null;
    }

    /**
     * @param UploadedFile $data
     * @param string $file
     * @return bool
     */
    protected function saveFile($data, $file)
    {
        /**
         * @var $model BaseActiveRecord
         */
        $model = $this->owner;

        // mkdir
        if (FileHelper::createDirectory(dirname($file))) {
            if ($data->saveAs($file)) {
                return true;
            }

            $model->addError($this->attribute, 'CAN NOT SAVE FILE');
        } else {
            $model->addError($this->attribute, 'CAN NOT CREATE DIRECTORY');
        }

        return true;
    }

    protected function removeOldAttribute()
    {
        // delete old file
        $oldFile = $this->getImagePath(true);
        if ($oldFile) {
            return @unlink($oldFile);
        }

        return false;
    }

    public function __get($name)
    {
        if ($name == $this->urlAttribute) {
            return $this->getImageUrl();
        }

        if ($name == $this->pathAttribute) {
            return $this->getImagePath();
        }

        return parent::__get($name); // TODO: Change the autogenerated stub
    }

    public function canGetProperty($name, $checkVars = true)
    {
        if ($name == $this->urlAttribute || $name == $this->pathAttribute) {
            return true;
        }

        return parent::canGetProperty($name, $checkVars); // TODO: Change the autogenerated stub
    }
}