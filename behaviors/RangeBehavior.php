<?php
/**
 * Created by PhpStorm.
 * User: quangthinh
 * Date: 7/18/2016
 * Time: 4:45 PM
 */

namespace quangthinh\yii\common\behaviors;


use Yii;
use yii\base\Behavior;
use yii\base\Event;
use yii\base\Model;
use yii\db\ActiveRecord;
use yii\db\BaseActiveRecord;
use yii\validators\RangeValidator;

/**
 * Class RangeBehavior
 * @package quangthinh\yii\common\behaviors
 *
 * Behavior Range (Validator + ...), create virtual attribute
 *
 * 'status' => [
 * 'class' => RangeBehavior::className(),
 * 'attributes' => [
 *     'status' => [
 *          self::LOCK => Yii::t('user', 'Lock'),
 *          self::ACTIVATED => Yii::t('user', 'Activate'),
 *     ],
 *  ],
 * ],
 */
class RangeBehavior extends Behavior
{
    public $defaultText = '';
    public $namingTemplate = '{attribute}_text';
    public $attributes;

    public $validator = [
        'strict' => false,
        'not' => false,
        'allowArray' => false,
    ];

    public $attributeValues = [];

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->prepareAttribute();
    }

    public function getRange($attribute)
    {
        return $this->attributes[$attribute];
    }

    public function events()
    {
        return [
            BaseActiveRecord::EVENT_BEFORE_VALIDATE => 'onBeforeValidate',
        ];
    }

    /**
     * Performs validation for all the attributes
     * @param Event $event
     */
    public function onBeforeValidate($event)
    {
        foreach ($this->attributes as $attribute => $range) {
            $options = $this->validator;
            $options['class'] = RangeValidator::className();
            $options['range'] = array_keys($range);

            $validator = Yii::createObject($options);
            $validator->validateAttribute($this->owner, $attribute);
        }
    }

    public function text($attribute)
    {
        /**
         * @var ActiveRecord $model
         */
        $model = $this->owner;
        $value = $model->getAttribute($attribute);
        return isset($this->attributes[$attribute][$value])
            ? $this->attributes[$attribute][$value]
            : $this->defaultText;
    }

    protected function processTemplate($originalAttribute)
    {
        return strtr($this->namingTemplate, [
            '{attribute}' => $originalAttribute,
        ]);
    }

    public function canGetProperty($name, $checkVars = true)
    {
        if (isset($this->attributeValues[$name])) {
            return true;
        }

        return parent::canGetProperty($name, $checkVars); // TODO: Change the autogenerated stub
    }

    public function __get($name)
    {
        if (isset($this->attributeValues[$name])) {
            return $this->text($this->attributeValues[$name]);
        }

        return parent::__get($name); // TODO: Change the autogenerated stub
    }

    private function prepareAttribute()
    {
        $attributes = array_keys($this->attributes);

        foreach ($attributes as $attribute) {
            if (empty($this->attributeValues[$attribute])) {
                $name = $this->processTemplate($attribute);
                $this->attributeValues[$name] = $attribute;
            }
        }
    }
}